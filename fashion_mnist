 import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
%matplotlib inline
from keras.datasets import fashion_mnist
(x_train, y_train), (x_test, y_test)=fashion_mnist.load_data()
from keras.datasets import fashion_mnist
fashion_mnist.os
(x_train, y_train), (x_test, y_test)=fashion_mnist.load_data()
plt.imshow(x_train[3])
x_train = x_train.astype("float") / 255.0
x_test = x_test.astype("float") / 255.0
x_train = np.expand_dims(x_train, axis=-1)
x_test = np.expand_dims(x_test, axis=-1)

from tensorflow.keras.utils import to_categorical
y_cat_train =to_categorical(y_train, 10)
y_cat_test =to_categorical(y_test, 10)

x_train.shape
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Conv2D, MaxPool2D, Flatten
#creatin model
model=Sequential()
model.add(Conv2D(filters=28, kernel_size=(2,2), input_shape=(28, 28, 1),   activation='relu'  ))
model.add(MaxPool2D(pool_size=(2,2)))
model.add(Conv2D(filters=28, kernel_size=(2,2), input_shape=(28, 28, 1),  activation='relu'  ))
model.add(MaxPool2D(pool_size=(2,2)))
model.add(Flatten())
model.add(Dense(224, activation='relu'))
model.add(Dense(10, activation='softmax'))
model.compile(loss='categorical_crossentropy', optimizer='adam',
             metrics=['accuracy'])
from tensorflow.keras.callbacks import EarlyStopping
early_stop=EarlyStopping(monitor='val_loss', patience=2)
#model.fit(x_train, y_train,  epochs=15, validation_data=(x_test, y_test ), callbacks=[early_stop])
model.fit(x_train, y_cat_train,  epochs=10, validation_data=(x_test, y_cat_test ), callbacks=[early_stop])
data[['loss','val_loss']].plot()
data[['accuracy','val_accuracy']].plot()
model.evaluate(x_test, y_cat_test, verbose=0)
from sklearn.metrics import confusion_matrix, classification_report
predict=model.predict(x_test)
classes_x=np.argmax(predict, axis=1)
print(classification_report(y_test, classes_x))
import seaborn as sns
sns.heatmap(confusion_matrix(y_test, classes_x))
confusion_matrix(y_test, classes_x)
