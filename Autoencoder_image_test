import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
from tensorflow.keras.datasets import mnistist
(X_train, y_train), (X_test, y_test)=mnist.load_data()
plt.imshow(X_train[0])  
X_train=X_train/255
X_test=X_test/255
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten, Reshape
from tensorflow.keras.optimizers import SGD
encoder=Sequential()
encoder.add(Flatten(input_shape=[28,28]))
encoder.add(Dense(400, activation='relu'))
encoder.add(Dense(200, activation='relu'))
encoder.add(Dense(100, activation='relu'))
encoder.add(Dense(50, activation='relu'))
encoder.add(Dense(25, activation='relu'))

decoder=Sequential()
decoder.add(Dense(50, input_shape=[25], activation='relu'))
decoder.add(Dense(100, activation='relu'))
decoder.add(Dense(200, activation='relu'))
decoder.add(Dense(400, activation='relu'))
#28*28     we use at the last dense sigmoid because we have to be sure the output image is same   
decoder.add(Dense(784,  activation='sigmoid'))
decoder.add(Reshape([28,28]))
autoencoder=Sequential( [encoder,decoder ])
autoencoder.compile(loss='binary_crossentropy', optimizer=SGD(lr=1.5),metrics=['accuracy'])
autoencoder.fit(X_train, X_train, epochs=4, validation_data=[X_test, X_test])
passed_images=autoencoder.predict(X_test[:10])
plt.imshow(X_test[n])
#addint some more noise to the picture
from tensorflow.keras.layers import GaussianNoise
sample=GaussianNoise(0.2)
noise=sample(X_test[:10], training=True)
n=0
plt.imshow(X_test[0])
print('Noise version')
plt.imshow(noise[n])
n=0
print('Original image')
plt.imshow(X_test[n])

print("attempted Reconstruction (after autoencoder)")
plt.imshow(passed_images[0])
tf.random.set_seed(101)
np.random.seed(101)

encoder=Sequential()
encoder.add(Flatten(input_shape=[28,28]))
#addding some noise to check our model
encoder.add(GaussianNoise(0.2))
encoder.add(Dense(400, activation='relu'))
encoder.add(Dense(200, activation='relu'))
encoder.add(Dense(100, activation='relu'))
encoder.add(Dense(50, activation='relu'))
encoder.add(Dense(25, activation='relu'))

decoder=Sequential()
decoder.add(Dense(50, input_shape=[25], activation='relu'))
decoder.add(Dense(100, activation='relu'))
decoder.add(Dense(200, activation='relu'))
decoder.add(Dense(400, activation='relu'))
#28*28     we use at the last dense sigmoid because we have to be sure the output image is same   
decoder.add(Dense(784,  activation='sigmoid'))
decoder.add(Reshape([28,28]))
noise_remover=Sequential( [encoder,decoder ])
noise_remover.compile(loss='binary_crossentropy', optimizer='adam',metrics=['accuracy'])
noise_remover.fit(X_train, X_train, epochs=8)
ten_noisy_images=sample(X_test[:10], training=True)
denoised=noise_remover(ten_noisy_images)
n=0
print("Original Image")
plt.imshow(X_test[0])
plt. show()
print("noise_added")
plt.imshow(ten_noisy_images[0])
plt.show()
print("After noise removal")
plt.imshow(denoised[0])
