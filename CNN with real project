import os
data_dir='C:\\Users\\Iyoqivino\\cell_images\\cell_images'
os.listdir(data_dir)
test_path=data_dir+'\\test\\'
train_path=data_dir+'\\train\\'
os.listdir(train_path)
os.listdir(train_path+'parasitized')[0]
paracell=train_path+'parasitized\\'+'C100P61ThinF_IMG_20150918_144104_cell_162.png'
plt.imshow(imread(paracell))
test_path=data_dir+'\\test\\'
train_path=data_dir+'\\train\\'
uninfected_cell=train_path+'uninfected\\'+'C100P61ThinF_IMG_20150918_144104_cell_128.png'
plt.imshow(imread(uninfected_cell))
len(os.listdir(train_path+'parasitized'))
len(os.listdir(train_path+'uninfected'))
dim1=[]
dim2=[]
for image_file in os.listdir(test_path+'uninfected'):
    img=imread(test_path+'uninfected\\'+image_file)
    d1,d2,colors=img.shape
    dim1.append(d1)
    dim2.append(d2)
sns.jointplot(dim1, dim2)
np.mean(dim1)
np.mean(dim2)
image_shape=(130,130,3)
from tensorflow.keras.preprocessing.image import ImageDataGenerator
image_gen=ImageDataGenerator(rotation_range=20,
                            width_shift_range=0.1,
                            height_shift_range=0.1,
                             shear_range=0.1,
                            #recscale needed to normilize picture the array values shoul;d be between 0 and 1
                            zoom_range=0.1,
                            horizontal_flip=True,
                            fill_mode='nearest' #if the picture size will be need to scretch out how do you fill the  blank space o or take the nearest
                         )
para_image=imread(paracell)
plt.imshow(para_image)
plt.imshow(image_gen.random_transform(para_image))
train_path
# using flow from directory we have to divide pictures in different classes example dog, cat , car pictures folders etc
image_gen.flow_from_directory(train_path)
image_gen.flow_from_directory(test_path)
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Conv2D, MaxPool2D, Dropout, Flatten
model=Sequential()
model.add(Conv2D(filters=32, kernel_size=(3,3), input_shape=image_shape, activation='relu'))
model.add(MaxPool2D(pool_size=(2,2)))
          
model.add(Conv2D(filters=64, kernel_size=(3,3), input_shape=image_shape, activation='relu'))
model.add(MaxPool2D(pool_size=(2,2)))

model.add(Conv2D(filters=64, kernel_size=(3,3), input_shape=image_shape, activation='relu'))
model.add(MaxPool2D(pool_size=(2,2)))

model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(1, activation='sigmoid'))
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
from tensorflow.keras.callbacks import EarlyStopping
early_stop=EarlyStopping(monitor='val_loss', patience=2)
batch_size=16
train_image_gen=image_gen.flow_from_directory(train_path, 
                                              target_size=image_shape[:2], 
                                              color_mode='rgb',
                                             batch_size=batch_size,
                                              class_mode='binary'
                                             )
test_image_gen=image_gen.flow_from_directory(test_path, 
                                              target_size=image_shape[:2], 
                                              color_mode='rgb',
                                             batch_size=batch_size,
                                              class_mode='binary',
                                             shuffle=False
                                             )
train_image_gen.class_indices
results=model.fit_generator(train_image_gen, epochs=20, validation_data=test_image_gen,
                           callbacks=[early_stop]
                           )
history=pd.DataFrame(model.history.history)
history[['accuracy','val_accuracy']].plot()
history[['loss','val_loss']].plot()
model.evaluate_generator(test_image_gen)
pred=model.predict(test_image_gen)
predictions=pred>0
predictions
from sklearn.metrics import classification_report, confusion_matrix
test_image_gen.classes
print(classification_report(test_image_gen.classes, predictions))
confusion_matrix(test_image_gen.classes, predictions)
from tensorflow.keras.preprocessing import image
my_image=image.load_img(paracell, target_size=image_shape)
model.summary()

my_image_array=image.img_to_array(my_image)
my_image_array.shape
my_image_array=np.expand_dims(my_image_array, axis=0)
my_image_array.shape
model.predict(my_image_array)
train_image_gen.class_indices
help(ImageDataGenerator)
