import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from tensorflow.keras.datasets import mnist
(X_train, y_train), (X_test, y_test)=mnist.load_data()
plt.imshow(X_train[0])
y_train
only_zeros=X_train [y_train==0]
only_zeros.shape
plt.imshow(only_zeros[1])
import tensorflow as tf
from tensorflow.keras.layers import Dense, Reshape, Flatten
from tensorflow.keras.models import Sequential
#creating  discriminator
discriminator=Sequential()
discriminator.add(Flatten(input_shape=[28,28]))
discriminator.add(Dense(150, activation='relu'))
discriminator.add(Dense(100, activation='relu'))

#final outputm layer
discriminator.add(Dense(1, activation='sigmoid'))
discriminator.compile(loss='binary_crossentropy', optimizer='adam')

#@signifize and shold be betweeen 159 and 30
coding_size=100
#784-->150>30>150>784
generator=Sequential()
generator.add(Dense(100, activation='relu', input_shape=[coding_size]))
generator.add(Dense(150, activation='relu' ))
generator.add(Dense(784, activation='relu' ))
generator.add(Reshape([28,28]))
Gan=Sequential([generator, discriminator])
discriminator.trainable=False
Gan.compile(loss='binary_crossentropy', optimizer='adam')
batch_size=32 
#my_data=X_train
mydata_set=only_zeros
dataset=tf.data.Dataset.from_tensor_slices(mydata_set).shuffle(buffer_size=1000)
type(dataset)
dataset=dataset.batch(batch_size, drop_remainder=True).prefetch(1)
epochs=1
Gan.layers[0].layers
generator, discriminator=Gan.layers

for epoch in range(epochs):
    print(f"Currently Epoch {epoch+1}")
    i=0
    for X_batch in dataset:
        i=i+1
        if i%100==0:
            print(f"\t Currently on batch number {i} of {len(mydata_set)//batch_size}")
            #discriminator training face
        noise=tf.random.normal(shape=[batch_size, coding_size])
        gen_images=generator(noise)
        X_face_vs_real=tf.concat([gen_images, tf.dtypes.cast(X_batch, tf.float32)], axis=0)
        y1=tf.constant([[0.0]]*batch_size+[[1.0]]*batch_size)
        discriminator.trainable=True
        discriminator.train_on_batch(X_face_vs_real, y1)
        
        #TRAIN GENERATOR
        noise=tf.random.normal(shape=[batch_size, coding_size])
        y2=tf.constant([[1.0]]*batch_size)
        discriminator.trainable=False
        Gan.train_on_batch(noise, y2)
#check if it can procute anything like 0
noise=tf.random.normal(shape=[10, coding_size])
noise.shape
plt.imshow(noise)
images=generator(noise)
images.shape
plt.imshow(images[0])
plt.imshow(images[1])
        
        
        
        
