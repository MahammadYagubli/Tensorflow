import numpy as np
import pandas as pd
iris=pd.read_csv('DATA/iris.csv')
iris
X=iris.drop('species', axis=1)
y=iris['species']
from sklearn.preprocessing import LabelBinarizer
encoder=LabelBinarizer()
y=encoder.fit_transform(y)
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, random_state=101)
scaler=MinMaxScaler()
scaler.fit(X_train)
scaled_X_train=scaler.transform(X_train)
scaled_X_test=scaler.transform(X_test)
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
model=Sequential()
model.add(Dense(units=4, activation='relu', input_shape=[4,]))
model.add(Dense(units=3, activation='softmax'))
model.compile(optimizer='adam' ,  loss='categorical_crossentropy', metrics=['accuracy'])
from tensorflow.keras.callbacks import EarlyStopping
early_stop = EarlyStopping( patience=10
                          )  
model.fit(x=scaled_X_train, y=y_train, 
          epochs=300, 
          validation_data=(scaled_X_test, y_test), callbacks=[early_stop])
data=pd.DataFrame(model.history.history)
data.plot()
model.evaluate(scaled_X_test, y_test, verbose=0)

scaled_x=scaler.fit_transform(X)
epochs=300
model=Sequential()
model.add(Dense(units=4, activation='relu', input_shape=[4,]))
model.add(Dense(units=3, activation='softmax'))
model.compile(optimizer='adam' ,  loss='categorical_crossentropy', metrics=['accuracy'])
model.fit(scaled_x, y, epochs=epochs
         )
model.fit(scaled_x, y, epochs)
model.save("final_iris_model.h5")
import joblib
joblib.dump(scaler, 'iris_scaler.pkl')
from tensorflow.keras.models import load_model
flower_model=load_model('final_iris_model.h5')
flower_scaler=joblib.load("iris_scaler.pkl")
iris.head(1)
flower_example={
    "sepal_length":5.1,
    "sepal_width":3.5,
    "petal_length":1.4,
    "petal_width":0.2
      
}
encoder.classes_
def return_prediction(model, scaler, sample_json):
    s_len=sample_json["sepal_length"]
    s_wid=sample_json["sepal_width"]
    p_len=sample_json["petal_length"]
    p_wid=sample_json["petal_width"]
    flower=[[s_len, s_wid, p_len, p_wid]]
    classes=np.array(['setosa', 'versicolor', 'virginica'])
    flower=scaler.transform(flower)
    predict_x=model.predict(flower)
    classes_x=np.argmax(predict_x,axis=1)
    
    #class_ind=model.predict(flower)
    return  classes[classes_x]
return_prediction(flower_model, flower_scaler, flower_example)
