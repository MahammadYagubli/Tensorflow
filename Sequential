import pandas as pd
import numpy as np
import seaborn as sns
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
arr=np.random.randint(1,100,(1000,3))
columns=['price', 'feature1', 'feature2']
index=[0,1,2,3,4]
df=pd.DataFrame(arr,columns=columns)
df=df*11
sns.pairplot(df)
from sklearn.model_selection import train_test_split
X=df[['feature1', 'feature2']].values
y=df['price']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
X_train.shape
X_test.shape
from sklearn.preprocessing import MinMaxScaler
scaler=MinMaxScaler()
scaler.fit(X_train)
X_train= scaler.transform(X_train)
X_test= scaler.transform(X_test)
#model=Sequential([Dense(4,activation='relu') , Dense(2,activation='relu'), Dense(1)])
model=Sequential()
model.add(Dense(4,activation='relu'))
model.add(Dense(2,activation='relu'))
model.add(Dense(1,activation='relu'))
model.compile(optimizer='rmsprop', loss='mse')
model.fit(x=X_train, y=y_train, epochs=300)
loss_df=pd.DataFrame(model.history.history)
loss_df.plot()
model.evaluate(X_test, y_test, verbose=0)
model.evaluate(X_train, y_train, verbose=0)
test_prediction=model.predict(X_test)
test_prediction=pd.Series(test_prediction.reshape(300,) )
pred_df=pd.DataFrame( y_test, columns=['Test True Y'])
pred_df=pd.concat([pred_df, test_prediction]) 
pred_df['TestY']=y_test
pred_df.columns=['Test true Y', 'Model Predicxtion']
sns.scatterplot(x='Test true Y',y='Model Predicxtion', data=pred_df )
from sklearn.metrics import mean_absolute_error, mean_squared_error
mean_absolute_error(pred_df['Test true Y'], pred_df['Model Predicxtion'] )
df.describe() 
mean_absolute_error(pred_df['Test true Y'], pred_df['Model Predicxtion'] )
new_gem=[[998,1000]]
new_gem=scaler.transform(new_gem)
model.predict(new_gem)
from tensorflow.keras.models import load_model
model.save('my_gem_model.h5')
later_model=load_model('my_gem_model.h5')
