import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
x=np.linspace(0,50,501)
y=np.sin(x)
plt.plot(x,y)
df=pd.DataFrame(data=y,index=x, columns=['Sine'])
test_percent=0.1
test_point =np.round( len(df) * test_percent )
test_ind =int( len(df) - test_point )
test=df.iloc[test_ind:]
train=df.iloc[:test_ind]
from sklearn.preprocessing import MinMaxScaler
scaler=MinMaxScaler()
scaler.fit(train)
scaled_train=scaler.transform(train)
scaled_test=scaler.transform(test)
from tensorflow.keras.preprocessing.sequence import TimeseriesGenerator
help(TimeseriesGenerator)
length=50
batch_size=1
generator=TimeseriesGenerator(
scaled_train, scaled_train, length=length, batch_size=batch_size

)
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, SimpleRNN, LSTM
n_features=1
model=Sequential()
model.add(SimpleRNN(50, input_shape=(length, n_features)))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mse')
model.summary()
model.fit_generator(generator,epochs=5)
loses=pd.DataFrame(model.history.history)
loses.plot()
first_eval_batch=scaled_train[-length:]
first_eval_batch=first_eval_batch.reshape((1,length, n_features))
model.predict(first_eval_batch)
scaled_test[0]
test_predictions=[]
first_eval_batch=scaled_train[-length:]
current_batch=first_eval_batch.reshape(1, length, n_features)
 
#here we just try to create the line that has been already given the best form opf it 
for i in range(len(test)):
    current_pred=model.predict(current_batch)[0]
    test_predictions.append(current_pred)
    current_batch=np.append(current_batch[:, 1:,:], [[current_pred]], axis=1)
true_prediction=scaler.inverse_transform(test_predictions)
test['predictions']=true_prediction
test.plot( figsize=(20,8))

from tensorflow.keras.callbacks import EarlyStopping
early_stop=EarlyStopping(monitor='value_loss', patience=2)
length=49
generator=TimeseriesGenerator(scaled_train, scaled_train, length=length, batch_size=1 )
validation_generator=TimeseriesGenerator(scaled_test, scaled_test, length=length, batch_size=1)
#here we use the same test and train data but LSTM to be able to predict better
model=Sequential()
model.add(LSTM(50, input_shape=(length, n_features)))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mse')
model.summary()
model.fit_generator(generator,epochs=20, validation_data=validation_generator, callbacks=[early_stop])
test_predictions=[]
first_eval_batch=scaled_train[-length:]
current_batch=first_eval_batch.reshape(1, length, n_features)
for i in range(len(test)):
    current_pred=model.predict(current_batch)[0]
    test_predictions.append(current_pred)
    current_batch=np.append(current_batch[:, 1:,:], [[current_pred]], axis=1)
true_prediction=scaler.inverse_transform(test_predictions)
test['LSTM Predictions']=true_prediction
test.plot( figsize=(20,8))

full_scaler=MinMaxScaler()
scaled_full_data=full_scaler.fit_transform(df)
generator=TimeseriesGenerator(scaled_full_data, scaled_full_data, length=length)
model=Sequential()
model.add(LSTM(50, input_shape=(length, n_features)))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mse')
model.fit_generator(generator,epochs=6 
                     )



#we are forecasting here the next line of the graph
forecast=[]
first_eval_batch=scaled_train[-length:]
current_batch=first_eval_batch.reshape(1, length, n_features)

for i in range(25):
    current_pred=model.predict(current_batch)[0]
    forecast.append(current_pred)
    current_batch=np.append(current_batch[:, 1:,:], [[current_pred]], axis=1)
    forecast=scaler.inverse_transform(forecast)
forecast
forecast_index=np.arange(50.1, 52.6, step=0.1)
len(forecast_index)
plt.plot(df.index, df['Sine'])
plt.plot(forecast_index, forecast)

 
