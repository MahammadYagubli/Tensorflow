import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
from tensorflow.keras.datasets import cifar10
import requests
requests.packages.urllib3.disable_warnings()
import ssl

try:
    _create_unverified_https_context = ssl._create_unverified_context
except AttributeError:
    # Legacy Python that doesn't verify HTTPS certificates by default
    pass
else:
    # Handle target environment that doesn't support HTTPS verification
    ssl._create_default_https_context = _create_unverified_https_context
    (x_train, y_train), (x_test, y_test) =cifar10.load_data()
x_train.shape
x_train[0].shape
plt.imshow(x_train[5])
x_train[0].max()
x_train=x_train/255
x_test=x_test/255
from tensorflow.keras.utils import to_categorical
y_cat_train=to_categorical(y_train, 10)
y_cat_test=to_categorical(y_test, 10)
y_train[0]
plt.imshow(x_train[0])
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Conv2D,MaxPool2D, Flatten
model=Sequential()
#Convolutoonal Layer 
model.add(Conv2D(filters=32, kernel_size=(4,4), input_shape=(32,32,3), activation='relu'))
#POOLING lAYER
model.add(MaxPool2D(pool_size=(2,2)))

#Convolutoonal Layer 
model.add(Conv2D(filters=32, kernel_size=(4,4), input_shape=(32,32,3), activation='relu'))
#POOLING lAYER
model.add(MaxPool2D(pool_size=(2,2)))

model.add(Flatten())

model.add(Dense(256,activation='relu'))
model.add(Dense(10, activation='softmax'))
model.compile(loss='categorical_crossentropy', optimizer='adam' 
             ,metrics=['accuracy']
             )
model.summary()
from tensorflow.keras.callbacks import EarlyStopping
early_stop=EarlyStopping(monitor='val_loss', patience=2)
model.fit(x_train, y_cat_train, epochs=15, validation_data=(x_test, y_cat_test), callbacks=[early_stop] )
metrics=pd.DataFrame(model.history.history)
metrics.columns
metrics[['accuracy', 'val_accuracy']].plot()
metrics[['loss',   'val_loss']].plot()
model.evaluate(x_test, y_cat_test, verbose=0)
from sklearn.metrics import classification_report, confusion_matrix
predict_x=model.predict(x_test) 
classes_x=np.argmax(predict_x,axis=1)
print(classification_report(y_test, classes_x))
import seaborn as sns
sns.heatmap(confusion_matrix(y_test, classes_x))
my_image=x_test[16]
plt.imshow(my_image)
model.predict(my_image.reshape(1,32,32,3) ).round()
