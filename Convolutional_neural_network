import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
from tensorflow.keras.datasets import mnist
(x_train, y_train),(x_test, y_test) = mnist.load_data()
x_train.shape
single_image=x_train[1]
plt.imshow(single_image)
y_train
single_image 
from tensorflow.keras.utils import to_categoricaly_train.shape
y_cat_train=to_categorical(y_train, num_classes=10)
y_cat_test=to_categorical(y_test, 10)
single_image.max()
single_image.min()
x_train=x_train/255
x_test=x_test/255
 scaled_image=x_train[0]
    scaled_image.max()
plt.imshow(scaled_image)
x_train.shape
x_test.shape
#batch_szie, width, height, color_channel
x_train=x_train.reshape(60000,28,28,1)
x_test=x_test.reshape(10000,28,28,1)

from tensorflow.keras.layers import Dense, Conv2D, MaxPool2D, Flatten
model=Sequential()
model.add( Conv2D(filters=32,kernel_size=(4,4), input_shape=(28,28,1), activation='relu'  ))
model.add(MaxPool2D(pool_size=(2,2)))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
#output Layer
model.add(Dense(10, activation='softmax'))
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
from tensorflow.keras.callbacks import EarlyStopping
import tensorflow.keras.losses
early_stop=EarlyStopping(monitor='val_loss', patience=1)
model.fit( x_train, y_cat_train, epochs=10, validation_data=(x_test, y_cat_test),
          callbacks=[early_stop])
metrics=pd.DataFrame(model.history.history)
metrics[['loss','val_loss']].plot()
metrics[['accuracy','val_accuracy']].plot()
model.metrics_names
model.evaluate(x_test, y_cat_test, verbose=0)
from sklearn.metrics import classification_report, confusion_matrix
predict_x=model.predict(x_test) 
classes_x=np.argmax(predict_x,axis=1)
print(classification_report(y_test, classes_x))
confusion_matrix( y_test, classes_x) 
import seaborn as sns 
plt.figure(figsize=(10,6))
sns.heatmap(confusion_matrix(y_test, classes_x), annot=True)
mynumber=x_test[0]
plt.imshow(mynumber.reshape(28,28))
predict_x=model.predict(mynumber.reshape(1,28,28,1)) 
classes_x=np.argmax(predict_x,axis=1)
classes_x
